#+TITLE: Emacs Config
#+AUTHOR: Dion Barrick
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes
#+DESCRIPTION: Dion's personal Emacs config
#+EXPORT_FILE_NAME: ~/projects/org/html/config.html
#+OPTIONS: num:nil ^:{}
   
* ABOUT THIS CONFIG
This is my personal Emacs config. This is my personal Emacs config. This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.This is my personal Emacs config.

reminder if a package doesn't install run the following:
package-refresh-contents 
  
** setup package

add Main Repositories for Emacs packages
| refresh packages         | M-x | package-refresh-contents                   |
| view packages            | M-x | package-list-packages                      |
| refresh packages         | M-x | package-refresh-contents                   |
| view packages            | M-x | package-list-packages                      |
| install a packge         | M-x | package-install <RET> <package_name> <RET> |
| install the next package | M-x | what is the drive                          |
|                          |     |                                            |
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
#+end_src

** use-package
Install use-package and enable ':ensure t' globally.  The ':ensure' keyword causes the package(s) within use-package statements to be installed automatically if not already present on your system.  To avoid having to add ':ensure t' to every use-package statement in this config, I set 'use-package-always-ensure'.

#+begin_src emacs-lisp
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)  
#+end_src

** auto-package-update
#+begin_src emacs-lisp
  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))
#+end_src

** startup Performance
#+begin_src emacs-lisp
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  (defun my/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
	     (format "%.2f seconds"
		     (float-time
		      (time-subtract after-init-time before-init-time)))
	     gcs-done))

  (add-hook 'emacs-startup-hook #'my/display-startup-time)
#+end_src

** global settings
bunch of global settings at startup
Disable line numbers for some modes
key bindings
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)    ; answer emacs
  (setq inhibit-startup-message t      ; ignore splash screen
        size-indication-mode t         ; display location percentage of buffer
        minibuffer-max-depth nil       ; set minibuffer max depth to ignore
        bell-volumne 0                 ; turn off bell
        visual-bell t                  ; set visual bell
        makefile-electric-keys t)      ; install electric key bindings for makefile mode
  (scroll-bar-mode -1)                 ; disable scroll bar
  (tool-bar-mode -1)                   ; remove toolbar
  (tooltip-mode -1)                    ; disable tooltips
  (set-fringe-mode 10)                 ; sets side bar limits
  (menu-bar-mode 1)                    ; disable menu bar
  (column-number-mode)                 ; display column number
  (display-time)                       ; to display time in the status bar
  (global-display-line-numbers-mode t) ; display line number

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  ;;treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; Key Bindings
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)  ; Make ESC quit prompts
  (global-set-key (kbd "<f1>")     'help-command)          ; help-command
  (global-set-key (kbd "<f2>")     'undo)                  ; undo
  (global-set-key (kbd "<f3>")     'find-file)             ; find-file
  (global-set-key (kbd "<f4>")     'set-mark-command)      ; set-mark-command
  (global-set-key (kbd "<f5>")     'query-replace)         ; search and replace
  (global-set-key (kbd "<f7>")     'save-buffer)           ; save buffer
  (global-set-key (kbd "C-<f5>")   'linum-mode)            ; show line numbers
  (global-set-key (kbd "<C-tab>")  'bury-buffer)           ; toggle between buffers
  (global-set-key (kbd "C-c C-c")  'comment-region)        ; comment region
  (global-set-key (kbd "C-=")      'text-scale-increase)   ; increase text
  (global-set-key (kbd "C--")      'text-scale-decrease)   ; decrease text
#+end_src

** backup-files
Emacs automatically saves backup versions of file and clutters folders
#+begin_src emacs-lisp
  (setq backup-directory-alist
  `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
  `((".*" ,temporary-file-directory t)))
#+end_src

** cue-mode
Copy / Paste / multiline editing

#+begin_src emacs-lisp
  (cua-mode 1)
  (setq cua-enable-cua-keys t)
  (setq cua-enable-modeline-indications t)
  (setq cua-remap-control-c t)
  (setq cua-remap-control-x t)
  (setq cua-remap-control-v t)
  (setq cua-remap-control-z t)
#+end_src

** marking text and cursor
make copy / paste play nice with others
change color of cursor base on editing mode
#+begin_src emacs-lisp
  ;;==============================================================================
  ;; marking text
  ;; make the current selection visible
  (transient-mark-mode t)
  ;; delete the selection area with a keypress
  (delete-selection-mode t)
  ;; allow emacs to play nice with others
  (setq x-select-enable-clipboard t)
  ;; Make the delete key delete forward instead of doing the same thing as the
  ;; backspace key
  (normal-erase-is-backspace-mode 1)
   
  ;;==============================================================================
  ;; make the copy/paste function work nicely with others
  (setq select-active-regions nil)
  (setq mouse-drag-copy-region t)
  (global-set-key (kbd "<mouse-2>") 'mouse-yank-at-click)
  ;;;highlight when searching and replacing
  (setq search-highlight t
    query-replace-highlight t)
  ;; This forces emacs to open the target of the link, rather than the link itself
  (setq find-file-visit-truename t)
   
  ;;==============================================================================
  ;; mode-line visual que of what text editing mode (overwrite, read_only, normal)
  ;; Change cursor color according to mode;
  ;; inspired by: http://www.emacswiki.org/emacs/ChangingCursorDynamically
  (setq djcb-read-only-color	   "gray")
  ;; valid values are t, nil, box, hollow, bar, (bar . WIDTH), hbar,
  ;; (hbar. HEIGHT); see the docs for set-cursor-type
  (setq djcb-read-only-color	   "blue")
  (setq djcb-read-only-cursor-type 'box)
  (setq djcb-overwrite-color	   "red")
  (setq djcb-overwrite-cursor-type 'box)
  (setq djcb-normal-color	   "green")
  (setq djcb-normal-cursor-type	   'box)
  ;;
  (defun djcb-set-cursor-according-to-mode ()
    "change cursor color and type according to some minor modes."
    (cond
     (buffer-read-only
      (set-cursor-color djcb-read-only-color)
      (setq cursor-type djcb-read-only-cursor-type))
     (overwrite-mode
      (set-cursor-color djcb-overwrite-color)
      (setq cursor-type djcb-overwrite-cursor-type))
     (t
      (set-cursor-color djcb-normal-color)
      (setq cursor-type djcb-normal-cursor-type))))
  (add-hook 'post-command-hook 'djcb-set-cursor-according-to-mode)
#+end_src

** abbrev
from : https://github.com/rememberYou/.emacs.d/blob/master/config.org
spelling help
#+begin_src emacs-lisp
  (use-package abbrev
    :ensure nil
    :delight
    :hook (text-mode . abbrev-mode)
    ;;:custom (abbrev-file-name (expand-file-name (format "%s/emacs/abbrev_defs" xdg-data)))
    :config
    (if (file-exists-p abbrev-file-name)
        (quietly-read-abbrev-file)))
  #+end_src
  
** all-the-icons
install the the fonts package
https://github.com/domtronn/all-the-icons.el#installing-fonts
install in the following locations:
win10 - c:\windows\font
linux - 
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t)
  #+end_src

** async
from: https://github.com/rememberYou/.emacs.d/blob/master/config.org
A good practice is to use an .org file to modify your GNU Emacs configuration with org-mode and to load this configuration via an .el file. This way you can maintain an org-mode configuration and still get a faster load.

Using the async package and the org-babel-tangle command, the code below will executes org-babel-tangle asynchronously when config.org is saved, to update the config.el file. From then on, you only need to add a add the my/config-tangle function to the after-save hook and specify the loading of the config.el file into the init.el file.
#+begin_src emacs-lisp
  (use-package async
    :after org
    :preface
    (defvar config-file (expand-file-name "config.org" user-emacs-directory)
      "The configuration file.")

    (defvar config-last-change (nth 5 (file-attributes config-file))
      "The last modification time of the configuration file.")

    (defvar show-async-tangle-results nil
      "Keep *emacs* async buffers around for later inspection.")

    (defun my/config-tangle ()
      "Tangle the org file asynchronously."
      (when (my/config-updated)
        (setq config-last-change
              (nth 5 (file-attributes config-file)))
        (my/async-babel-tangle config-file)))

    (defun my/config-updated ()
      "Check if the configuration file has been updated since the last time."
      (time-less-p config-last-change
                   (nth 5 (file-attributes config-file))))

    (defun my/async-babel-tangle (org-file)
      "Tangle the org file asynchronously."
      (let ((init-tangle-start-time (current-time))
            (file (buffer-file-name))
            (async-quiet-switch "-q"))
        (async-start
         `(lambda ()
            (require 'org)

            (org-babel-tangle-file ,org-file))
         (unless show-async-tangle-results
           `(lambda (result)
              (if result
                  (message "[✓] %s successfully tangled (%.2fs)"
                           ,org-file
                           (float-time (time-subtract (current-time)
                                                      ',init-tangle-start-time)))
                (message "[✗] %s as tangle failed." ,org-file))))))))
#+end_src

#+RESULTS:

** calc
from: https://github.com/rememberYou/.emacs.d/blob/master/config.org
#+begin_src emacs-lisp
  (use-package calc
    :ensure nil
    :custom
    (math-additional-units
     '((GiB "1024 * MiB" "Giga Byte")
       (MiB "1024 * KiB" "Mega Byte")
       (KiB "1024 * B" "Kilo Byte")
       (B nil "Byte")
       (Gib "1024 * Mib" "Giga Bit")
       (Mib "1024 * Kib" "Mega Bit")
       (Kib "1024 * b" "Kilo Bit")
       (b "B / 8" "Bit")))
    ;; Resets the calc's cache.
    (math-units-table nil))
#+end_src

** calendar
from: https://github.com/rememberYou/.emacs.d/blob/master/config.org
#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :bind ("C-c 0" . calendar)
    :custom
    (calendar-mark-holidays-flag t)
    (calendar-week-start-day 1))

  ;; update as necessary
  (use-package holidays
  :ensure nil
  :custom
  (holiday-bahai-holidays nil)
  (holiday-hebrew-holidays nil)
  (holiday-islamic-holidays nil)
  (holiday-oriental-holidays nil)
  (holiday-christian-holidays
   '((holiday-fixed 1 6 "Epiphany")
     (holiday-fixed 2 2 "Candlemas")
     (holiday-easter-etc -47 "Mardi Gras")
     (holiday-easter-etc 0 "Easter Day")
     (holiday-easter-etc 1 "Easter Monday")
     (holiday-easter-etc 39 "Ascension")
     (holiday-easter-etc 49 "Pentecost")
     (holiday-fixed 8 15 "Assumption")
     (holiday-fixed 11 1 "All Saints' Day")
     (holiday-fixed 11 2 "Day of the Dead")
     (holiday-fixed 11 22 "Saint Cecilia's Day")
     (holiday-fixed 12 1 "Saint Eloi's Day")
     (holiday-fixed 12 4 "Saint Barbara")
     (holiday-fixed 12 6 "Saint Nicholas Day")
     (holiday-fixed 12 25 "Christmas Day")))
  (holiday-general-holidays
   '((holiday-fixed 1 1 "New Year's Day")
     (holiday-fixed 2 14 "Valentine's Day")
     (holiday-fixed 3 8 "International Women's Day")
     (holiday-fixed 10 31 "Halloween")
     (holiday-fixed 11 11 "Armistice of 1918")))
  (holiday-local-holidays
   '((holiday-fixed 5 1 "Labor Day")
     (holiday-float 3 0 0 "Grandmothers' Day")
     (holiday-float 4 4 3 "Secretary's Day")
     (holiday-float 5 0 2 "Mother's Day")
     (holiday-float 6 0 2 "Father's Day")
     (holiday-fixed 7 21 "Belgian National Day"))))
#+end_src

** company
from: https://github.com/rememberYou/.emacs.d/blob/master/config.org
Auto-completion with GNU Emacs is mainly combined with LSP mode. Therefore the development of any programming language is made easier with auto-completion, which involves a completion at point followed by the display of a small pop-in containing the candidates.
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay 0.5)
    (company-minimum-prefix-length 1)
    (company-show-quick-access t)
    (company-tooltip-align-annotations 't))

  (use-package company-box
    :if (display-graphic-p)
    :after company
    :hook (company-mode . company-box-mode))
#+end_src

** counsel
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))
#+end_src

** dashboard
used for startup for recent files
#+begin_src emacs-lisp
  (use-package dashboard
  :ensure t  ;; install if not installed
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-set-footer nil)	  ;; disable random messages at startup
  (setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  ;;(setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content nil) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
			  (agenda . 5 )
			  (bookmarks . 3)
			  (projects . 3)
			  (registers . 3)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			    (bookmarks . "book"))))
#+end_src

** doom-modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

** flyspell
get hunspell from https://github.com/hunspell/hunspell following the instructions for installing on your platform.
Note: no language file are installed.
get language set from the following
*** MacOS
    1. git clone https://github.com/hunspell/hunspell
       put it in your git projects folder
    2. brew install hunspell
    3. cd ~/Library/Spelling
        wget http://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.aff
        wget http://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.dic

*** Windows (cygwin)
minimum will need to install python on the windows machine regardless if anaconda is already on
    1. change the home directory in /etc/nsswitch.conf
      db_home: /%H/
    2. get the following packages:
       autoconf
       automake
       dos2unix
       gcc-g++ development package
       gettext
       gettext-devel
       hunspell
       libiconv
       liblzma-devel
       libtool
       make
       ncurses, readline (for user interface)
       wget
     3. cd ~/Library/Spelling
        wget http://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.aff
        wget http://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.dic
     4. cd into the cloned hunspell directory
         dos2unix all the files before installing
     5. follow instructions on hunspell git page
              
#+begin_src emacs-lisp
  ;;(add-to-list 'exec-path "C:\\cygwin64\\bin")
  ;;(add-to-list 'exec-path "~\\Library\\\Spelling")
  ;;(use-package flyspell
  ;;  :ensure nil
  ;;  :delight
  ;;  :hook ((text-mode . flyspell-mode)
  ;;         (prog-mode . flyspell-prog-mode))
  ;;  :custom
  ;;  ;; Add correction to abbreviation table.
  ;;  (flyspell-abbrev-p t)
  ;;  (flyspell-default-dictionary "en_US")
  ;;  (flyspell-issue-message-flag nil)
  ;;  (flyspell-issue-welcome-flag nil))

  ;;(use-package ispell
  ;;  :preface
  ;;  (defun my/switch-language ()
  ;;    "Switch between the English and French for ispell, flyspell, and LanguageTool."
  ;;    (interactive)
  ;;    (let* ((current-dictionary ispell-current-dictionary)
  ;;           (new-dictionary (if (string= current-dictionary "en_US") "en_US")))
  ;;      (flyspell-buffer)
  ;;      (message "[✓] Dictionary switched to %s" new-dictionary)))
  ;;  :custom
  ;;  (ispell-hunspell-dict-paths-alist
  ;;   '(("en_US" "~Library/Spelling")))
  ;;  ;; Save words in the personal dictionary without asking.
  ;;  (ispell-silently-savep t)
  ;;  :config
  ;;  (setenv "LANG" "en_US")
  ;;  (cond ((executable-find "aspell")
  ;;         (setq ispell-program-name "aspell")
  ;;         (setq ispell-local-dictionary-alist '(("en_US"
  ;;                                                "[[:alpha:]]"
  ;;                                                "[^[:alpha:]]"
  ;;                                                "['’-]"
  ;;                                                t
  ;;                                                ("-d" "en_US" )
  ;;                                                nil
  ;;                                                  utf-8))))
  ;;          ((executable-find "aspell")
  ;;           (setq ispell-program-name "aspell")
  ;;           (setq ispell-extra-args '("--sug-mode=ultra"))))
  ;;    ;; Ignore file sections for spell checking.
  ;;    (add-to-list 'ispell-skip-region-alist '("#\\+begin_align" . "#\\+end_align"))
  ;;    (add-to-list 'ispell-skip-region-alist '("#\\+begin_align*" . "#\\+end_align*"))
  ;;    (add-to-list 'ispell-skip-region-alist '("#\\+begin_equation" . "#\\+end_equation"))
  ;;    (add-to-list 'ispell-skip-region-alist '("#\\+begin_equation*" . "#\\+end_equation*"))
  ;;    (add-to-list 'ispell-skip-region-alist '("#\\+begin_example" . "#\\+end_example"))
  ;;    (add-to-list 'ispell-skip-region-alist '("#\\+begin_labeling" . "#\\+end_labeling"))
  ;;    (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
  ;;    (add-to-list 'ispell-skip-region-alist '("\\$" . "\\$"))
  ;;    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  ;;    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:")))
    #+end_src
    
** general
not used at the moment
#+begin_src emacs-lisp
  ;;;==============================================================================
  ;;(use-package general
  ;;  :ensure t
  ;;  :config
  ;;  (general-create-definer leader-keys
  ;;    ;:keymaps '(normal insert visual emacs)
  ;;    ;:prefix "SPC"
  ;;    :global-prefix "C-c");
  ;;
  ;;  (leader-keys
  ;;    "t"  '(:ignore t :which-key "toggles")
  ;;    "tt" '(counsel-load-theme :which-key "choose theme")
  ;;    "fde" '(lambda () (interactive) (find-file (expand-file-name "~/.emacs.d/Emacs.org")))))
 #+end_src

** global-command-log-mode
#+begin_src emacs-lisp
  (use-package command-log-mode
    :commands command-log-mode)
#+end_src

** grammer checker
#+begin_src emacs-lisp
  (use-package lsp-ltex
    :disabled
    :custom
    (lsp-ltex-enabled nil)
    (lsp-ltex-mother-tongue "en"))
 #+end_src
 
** helpful
used to find key bindings available
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
 #+end_src

** highlight-indent
from https://github.com/DarthFennec/highlight-indent-guides
#+begin_src emacs-lisp
    (use-package highlight-indent-guides
      :ensure nil
      :hook (prog-mode . highlight-indent-guides-mode)
      :init
      (setq highlight-indent-guides-method 'character)
      )
 #+end_src

** history
fast keybindings
#+begin_src emacs-lisp
  (use-package savehist
    :ensure nil
    :custom
    (history-delete-duplicates t)
    (history-length 25)
    ;;(savehist-file (expand-file-name (format "%s/emacs/history" xdg-cache)))
    :config (savehist-mode))
 #+end_src
 
** hydra
fast keybindings
#+begin_src emacs-lisp
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
  ;(leader-keys
  ;  "ts" '(hydra-text-scale/body :which-key "scale text"))
 #+end_src

** ivy
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
 
  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))
 
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1)) 
 #+end_src
 
** lsp
from: https://github.com/rememberYou/.emacs.d/blob/master/config.org
The main benefit of using Language Server Protocol (LSP) to configure the management of your programming languages is that LSP servers are also used by other text editors, increasing contributions to these packages. What could be better than benefiting from the larger community, while keeping a quality text editor ;-)

We need a Language Server Protocol (LSP) client to use different LSP servers according to the programming languages that we would like to use. That’s where lsp-mode comes in!
#+begin_src emacs-lisp
;;  (use-package lsp-mode
;;    :commands (lsp lsp-deferred)
;;    :hook ((prog-mode . lsp-deferred)
;;           (lsp-mode . lsp-enable-which-key-integration))
;;    :custom
;;    (lsp-enable-folding nil)
;;    (lsp-enable-links nil)
;;    (lsp-enable-snippet nil)
;;    (lsp-keymap-prefix "C-c ;")
;;    ;;(lsp-session-file (expand-file-name (format "%s/emacs/lsp-session-v1"  xdg-data)))
;;    (read-process-output-max (* 1024 1024)))
;; 
;;  ;; additional information on variables
;;  (use-package lsp-ui
;;    :hook (lsp-mode . lsp-ui-mode))
;; 
;;  ;; navigate errors
;;  (use-package consult-lsp
;;    :commands (consult-lsp-diagnostics consult-lsp-symbols))
;; 
;;  ;; debugger
;;  (use-package dap-mode
;;    :after lsp-mode
;;    :config
;;    (dap-mode t)
;;    (dap-ui-mode t))
#+end_src

** magit
magit used to integrate git
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** org-mode
life is worth living with org-mode life is worth living with org-modelife is worth living with org-mode life is worth living with org-modelife is worth living with org-modelife is worth living with org-modelife is worth living with org-modelife is worth living with org-mode 
#+begin_src emacs-lisp
  (defun my/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun my/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "DejaVu Sans Mono" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :ensure nil
    :hook (org-mode . my/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (my/org-font-setup))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

  (defun my/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . my/org-mode-visual-fill))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (org . t)
     ))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun my/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/config.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'my/org-babel-tangle-config)))
#+end_src

** programming modes
my vhdl mode settings
#+begin_src emacs-lisp
  ;; bash
  (use-package sh-script
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))

  ;; vhdl
  (use-package vhdl-mode
    :init
    :bind (:map vhdl-mode-map
                ("S-<f1>" . vhdl-speedbar))
    :config
    (setq vhdl-speedbar-update-on-saving t
          vhdl-clock-name "i_clk"
          vhdl-clock-rising-edge t
          vhdl-clock-edge-condition 'function
          ;; RESET
          vhdl-reset-kind 'sync
          vhdl-reset-name "i_rst"
          vhdl-reset-active-high t
          ;; COMMENTS
          vhdl-self-insert-comments nil
          vhdl-include-port-comments nil
          vhdl-include-direction-comments nil
          vhdl-include-type-comments nil
          vhdl-include-group-comments 'always
          vhdl-end-comment-column 80
          vhdl-inline-comment-column 40
          vhdl-stutter-mode t
          vhdl-comment-inline-offset 2
          vhdl-comment-empty-lines t
          ;; GENERAL
          vhdl-standard '(93 nil)
          vhdl-indent-tabs-mode nil
          vhdl-basic-offset 2
          vhdl-electric-mode t
          vhdl-index-menu t
          vhdl-source-file-menu t
          vhdl-insert-empty-lines nil
          vhdl-upper-case-keywords nil
          vhdl-upper-case-types nil
          vhdl-upper-case-attributes nil
          vhdl-upper-case-enum-values nil
          vhdl-highlight-case-sensitive nil
          vhdl-highlight-translate-off nil
          vhdl-word-completion-case-sensitive nil
          vhdl-underscore-is-part-of-word t
          vhdl-align-groups nil
          vhdl-fixup-whitespace-region t
          vhdl-conditions-in-parenthesis t
          vhdl-optional-labels 'process
          ;; PORT MAPS
          vhdl-actual-port-name '(".*" . "\\&")
          ;; INSTANCE
          vhdl-instance-name '(".*" . "u_\\& ")
          vhdl-component-instance t
          ;; VHDL HEADER
          vhdl-file-header "-------------------------------------------------------------------------------
    -- Author      : <name>
    -- Filename    : <filename>
    -- Date	       : <date>
    -- Description :
    --	       :
    -- Revision    :
    --
    -------------------------------------------------------------------------------
    -- PROPRIETARY INFORMATION:
    -------------------------------------------------------------------------------

    library ieee;
    use ieee.std_logic_1164.all;
    use ieee.numeric_std.all;

    <cursor>")
     )
#+end_src

** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/projects")
      (setq projectile-project-search-path '("~/projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+end_src

** theme
#+begin_src emacs-lisp
  ;;==============================================================================
  ;; themes
  ;;(use-package doom-themes
  ;;  :init (load-theme 'doom-palenight t))
  ;;(use-package doom-themes
  ;;  :init (load-theme 'doom-one t))
  ;;(use-package doom-themes
  ;;  :init (load-theme 'doom-dracula t))
  (use-package spacemacs-common
    :ensure spacemacs-theme
    :config
    (setq spacemacs-theme-comment-bg nil
          spacemacs-theme-common-italic nil)
    (load-theme 'spacemacs-dark t))
#+end_src

** rainbow-delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)) 
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3))  
#+end_src




